---
# create pools for openstack
#
- name: get OSD number
  shell: ceph -s | grep osdmap | sed 's/^.* \([0-9]\+\) osds.*/\1/'
  register: total_osd

- debug: var=total_osd

- name: get up OSD number
  shell: ceph -s | grep osdmap | sed 's/^.* \([0-9]\+\) up.*/\1/'
  register: up_osd

- debug: var=up_osd

- name: get in OSD number
  shell: ceph -s | grep osdmap | sed 's/^.* \([0-9]\+\) in.*/\1/'
  register: in_osd

- debug: var=in_osd

- name: load OSD layout
  set_fact:
    osd_layout: "{{ ceph_osd_layouts[ceph_osd_layout_map[groups.OSD.0].osd] | mandatory }}"

#- assert:
#    that:
#      - "total_osd.stdout | int == (osd_layout | length * groups.OSD | length)"
#      - "up_osd.stdout | int == total_osd.stdout | int"
#      - "in_osd.stdout | int == total_osd.stdout | int"

- name: calculate pg number
  set_fact:
    pg_num: "{{ ((100 * (total_osd.stdout | int) / (groups.OSD | length)) | int) | int }}"

- debug: var=pg_num

- name: create openstack storage pool
  command: ceph osd pool create {{ item }} {{ pg_num }} hdd
  with_items:
    - volumes
    - images

- name: create pools for different disk types
  command: ceph osd pool create {{ item }} {{ pg_num }} {{ item }}
  with_items: "{{ types | unique | list }}"

- name: get replica size
  set_fact:  
    replicas: 3

- name: get replica size
  set_fact:  
    replicas: "{{ groups.OSD | length | int }}"
  when:  groups.OSD | length | int  < "{{ replicas }}"

- debug: var=replicas

- name: change pool replica number
  command: ceph osd pool set {{ item }} size {{ replicas | int }} 
  with_items:
    - volumes
    - images
    - "{{ types | unique | list }}"

# vim: ft=yaml:shiftwidth=2:tabstop=2:expandtab:softtabstop=2
